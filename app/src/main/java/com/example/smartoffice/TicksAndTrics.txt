fun <T, U, R> Pair<T?, U?>.biLet(body: (T, U) -> R): R? {
     val first = first
     val second = second
     if (first != null && second != null) {
         return body(first, second)
     }
     return null
 }

 (first to second).biLet { first, second ->
      // body
 }

 ___________________________
 fun <T : Any> arrayOfNotNullOrNull(vararg elements: T?): Array<T>? {
     for (element in elements) {
         if (element == null) {
             return null
         }
     }
     return elements as Array<T>
 }
 You can then use it for a variable number of values with let:

 fun example(first: String?, second: String?) {
     arrayOfNotNullOrNull(first, second)?.let {
         // Do something just if both are != null
         // e.g. val (notNullFirst, notNullSecond) = it ...
     }
 }